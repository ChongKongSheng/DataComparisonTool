/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package comparison;


import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
/**
 *
 * @author 40993
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        setVisible(true);
        setResizable(false);
        
    }
    String value;
  //  String header1[];
  //  ArrayList[][] table = new ArrayList[rows][cols];
    ArrayList<ArrayList<String>> table1 = new ArrayList<>();
    ArrayList<ArrayList<String>> table2 = new ArrayList<>();
    int count_R1 = 0, count_R2 = 0, count_H1 = 0, count_H2 = 0, count_D1 = 0, count_D2=0;
    int count_MR1 = 0 , count_MR2 = 0, count_MH1 = 0, count_MH2 = 0, count_ME = 0;
    boolean miss_result = false;
    ArrayList header1 = new ArrayList();
    ArrayList header2 = new ArrayList();
   // LinkedList content1 = new LinkedList();
    ArrayList content1 = new ArrayList();
    ArrayList content2 = new ArrayList();
    ArrayList frow1 = new ArrayList();
    ArrayList fcol1 = new ArrayList();
    ArrayList frow2 = new ArrayList();
    ArrayList fcol2 = new ArrayList();
    ArrayList drow1 = new ArrayList();
    ArrayList drow2 = new ArrayList();
    String[] splitHeader1;
    String[] splitHeader2;
    String[] splitContent1;
    String[] splitContent2;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pathResult1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        pathResult2 = new javax.swing.JTextArea();
        path1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        pathBtn1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        path2 = new javax.swing.JTextField();
        pathBtn2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        count1 = new javax.swing.JLabel();
        count2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        collist1 = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        countMH1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        collist2 = new javax.swing.JTextArea();
        countMH2 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        rowlist1 = new javax.swing.JTextArea();
        countMR1 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        rowlist2 = new javax.swing.JTextArea();
        countMR2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        misslist = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        countME = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Data Comparison Tool v3");

        startBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        startBtn.setText("Start");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        resetBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Your Files Here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tempus Sans ITC", 1, 14))); // NOI18N
        jPanel1.setToolTipText("");
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setFocusable(false);
        jPanel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jPanel1.setName(""); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pathResult1.setColumns(20);
        pathResult1.setRows(5);
        jScrollPane1.setViewportView(pathResult1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 53, 460, 202));

        pathResult2.setColumns(20);
        pathResult2.setRows(5);
        jScrollPane2.setViewportView(pathResult2);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 50, 419, 202));

        path1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                path1ActionPerformed(evt);
            }
        });
        jPanel1.add(path1, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 22, 320, -1));

        jLabel2.setText("PATH1:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, 30));

        pathBtn1.setText("Browse");
        pathBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(pathBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, -1, -1));

        jLabel3.setText("PATH2:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 20, -1, 30));
        jPanel1.add(path2, new org.netbeans.lib.awtextra.AbsoluteConstraints(594, 20, 300, -1));

        pathBtn2.setText("Browse");
        pathBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathBtn2ActionPerformed(evt);
            }
        });
        jPanel1.add(pathBtn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 20, -1, -1));

        jLabel4.setText("Total rows: ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 262, -1, -1));

        count1.setText("    ");
        jPanel1.add(count1, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 262, 50, -1));

        count2.setText("  ");
        jPanel1.add(count2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 260, 49, -1));

        jLabel7.setText("Total rows: ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 260, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Result", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tempus Sans ITC", 1, 18))); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Missing Colums", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tempus Sans ITC", 1, 14))); // NOI18N

        jLabel9.setText("Redshift: ");

        collist1.setColumns(20);
        collist1.setRows(5);
        jScrollPane3.setViewportView(collist1);

        jLabel13.setText("Total: ");

        countMH1.setText("   ");

        jLabel8.setText("Oracle: ");

        collist2.setColumns(20);
        collist2.setRows(5);
        jScrollPane7.setViewportView(collist2);

        countMH2.setText("    ");

        jLabel15.setText("Total: ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(countMH1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane7)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(countMH2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 27, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(countMH1))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countMH2)
                    .addComponent(jLabel15))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Missing Rows", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tempus Sans ITC", 1, 14))); // NOI18N

        jLabel12.setText("Redshift: ");

        rowlist1.setColumns(20);
        rowlist1.setRows(5);
        jScrollPane4.setViewportView(rowlist1);

        countMR1.setText(" ");

        jLabel14.setText("Total: ");

        jLabel11.setText("Oracle: ");

        rowlist2.setColumns(20);
        rowlist2.setRows(5);
        jScrollPane8.setViewportView(rowlist2);

        countMR2.setText("    ");

        jLabel17.setText("Total: ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel11))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(countMR1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(countMR2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countMR1)
                    .addComponent(jLabel14))
                .addGap(27, 27, 27)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(countMR2)
                    .addComponent(jLabel17))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MisMatch Elements", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tempus Sans ITC", 1, 14))); // NOI18N

        misslist.setColumns(20);
        misslist.setRows(5);
        jScrollPane5.setViewportView(misslist);

        jLabel16.setText("Total: ");

        countME.setText("   ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countME, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countME)
                    .addComponent(jLabel16))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        status.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        status.setText("Ready");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Status: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(status)
                                .addGap(253, 253, 253)
                                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(resetBtn))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 996, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBtn)
                    .addComponent(jLabel5)
                    .addComponent(status)
                    .addComponent(resetBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void path1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_path1ActionPerformed
        // TODO add your handling code here:
        
      
    }//GEN-LAST:event_path1ActionPerformed

    private void pathBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathBtn1ActionPerformed
     
     // show file path
     JFileChooser file1 = new JFileChooser();
     int opt = file1.showOpenDialog(null);
     File filepath1 = file1.getSelectedFile();
     
     if (opt == JFileChooser.APPROVE_OPTION){
         path1.setText(filepath1.toString());
//         System.out.println("You chose to open this file: " + file1.getSelectedFile());
  
     }
      // This will reference one line at a time
        String line = null;

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = 
                new FileReader(filepath1);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = 
                new BufferedReader(fileReader);
            
              //create the model
           
            while((line = bufferedReader.readLine()) != null) {
                if (count_R1 == 0){
                   header1.add(line);
                }else{
                   content1.add(line);
                   frow1.add(count_R1);
              
                }
                count_R1++;
                
                /*
                System.out.println(line);
           
            //    model1.addColumn(header1.get(count_R1));
                model1.addRow(new Object[]{3});
            //    count_R1++;
               
                List1.add(line);
                Miss.add(line);
               */
               
            }// end of while
         
            System.out.println("the header ->" + header1);
//            System.out.println("the content ->" + content1);
//            System.out.println("the size content ->" + content1.size());
          //  System.out.println("the current content ->" + content1.get(1).toString());
//           
            //cut whitespace and extra characters for headers and content
//            String[] splitHeader1 = header1.toString().trim().replace("[", "").replace("]", "").split("\\s+");
              splitHeader1 = header1.toString().trim().replace("[", "").replace("]", "").replace("﻿","").replaceAll("\\s+", " ").split("!");
//            String[] splitHeader1 = header1.toString().trim().replace("[", "").replace("]", "").split("\t"); // by quote
          //  String[] splitContent1 = content1.toString().trim().replace("[", "").replace("]", "").split("\\s+");
            
            //display splited header words
//            System.out.println("Headers: ");
            
           
            //separate string by space
            for (int i = 0; i < splitHeader1.length; i++){
              //  model1.addColumn(splitHeader1[i]);
              //  System.out.println(splitHeader1[i]);
                table1.add(new ArrayList<>());
                table1.get(0).add(splitHeader1[i]);
                pathResult1.append(splitHeader1[i] + " ");
//                pathResult1.append(splitHeader1[i].replace("\"","") + " ");
                fcol1.add(count_H1);
//                MissH.add(splitHeader1[i]);
//                MissH.add(splitHeader1[i].replace("\"",""));
//                table_oc.getColumnModel().getColumn(i).setHeaderValue(splitHeader1[i].trim());
//                table_oc.getTableHeader().resizeAndRepaint();
               // System.out.println(table[0][i]);
//               System.out.print(table1.get(0).get(i));
//               System.out.print("  ");
               count_H1++;
            }
           
            pathResult1.append("\n");
                   
            //display splited content words
//             System.out.println("Content: ");          
//            System.out.println("Content before removed space" + content1);
//               System.out.println("the size content ->" + content1.size());
              
             for (int i = 0; i < content1.size(); i++){
              //  model1.addColumn(splitHeader1[i]);
//             System.out.print(content1.get(i));
//             System.out.print("  ");
               
               splitContent1 = content1.get(i).toString().trim().replace("[", "").replace("]", "").replaceAll("\\s+", " ").split("!");
//               String[] splitContent1 = content1.get(i).toString().replace("[", "").replace("]", "").split("\t");//bytab
//               String[] splitContent1 = content1.get(i).toString().replace("[", "").replace("]", "").split("\"");
//               System.out.println("Content after removed space" + Arrays.toString(splitContent1));
//               System.out.println("the size splitcontent ->" + splitContent1.length);
                int c_row = i+1;
                
               for (int j = 0; j < splitContent1.length; j++){

//                    System.out.println(splitContent1.length);
                    table1.add(new ArrayList<>());
//                    System.out.println("C_row is " + c_row);
     
                    table1.get(c_row).add(splitContent1[j]);
                    pathResult1.append(splitContent1[j] + " ");
//                    table_oc.getModel().setValueAt(splitContent1[i], i, j);
//                    System.out.print(table1.get(c_row).get(j));
//                    System.out.print("  ");
                      
               }//end second for
//                System.out.print("\n");
//               System.out.println("Current content row " + c_row + " is " + table1.get(c_row));
//               System.out.println("Current row size " + table1.get(c_row).size());
//                System.out.println("");
                pathResult1.append("\n");
            }//end first for
            //display of table1
//         System.out.println("Table 1 ");
//           for (int  i = 0; i< count_R1; i ++){
//            System.out.println(table1.get(i));
//           }

            

            count1.setText(String.valueOf(count_R1));
            // Always close files.
            bufferedReader.close();         
        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" + 
                filepath1 + "'");                
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '" 
                + filepath1 + "'");    
    }//GEN-LAST:event_pathBtn1ActionPerformed
    }
    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
   
    //------------------------------------------------------------------------------------------COLUMN------------------------------------------------------------------------------------------ 
//     System.out.println("The number of columns of file1 and file2 are ");
//     System.out.println("Count_R1 " + count_R1 );
//     System.out.println("Count_H1 " + count_H1 );
//     System.out.println("Count_R2 " + count_R2 );
//     System.out.println("Count_H2 " + count_H2 );

 
    //oracle compared with redshift and remove oracle table size
     for(int i = 0; i < count_H1; i++){
        for (int j = 0; j < count_H2; j++){
              //*DEBUG
//              System.out.print("Table 1 Column " + i + "=" + table1.get(0).get(i)+"-------------");
//              System.out.println("Table 2 Column " + j + "=" + table2.get(0).get(j));
                if(table1.get(0).get(i).trim().equals(table2.get(0).get(j).trim().toUpperCase())){
                      fcol1.remove(Integer.valueOf(i));     
                      break;
               }// end 2nd if
         }//end second for
     }// end first for
     System.out.print(table1.get(0).get(0));
     if(!fcol1.isEmpty()){//display missing columns compared to Oracle
            collist1.append("Redshift is MISSING columns below: " + "\n");
            for(int k = 0; k < fcol1.size(); k++){
                collist1.append("Col " + (Integer)fcol1.get(k));
                collist1.append("\n");
                collist1.append(table1.get(0).get((Integer)fcol1.get(k)));
                collist1.append("\n");
                //*DEBUG
    //            System.out.print("Col " + (Integer)fcol1.get(k));
    //            System.out.println(" " + table1.get(0).get((Integer)fcol1.get(k)));
        //      System.out.println("Current H1 is " + count_H1);
                count_H1--;
                count_MH1++;
            }//end for

            //remove table1 columns
             for(int m = fcol1.size()-1 ; m >= 0; m--){
                 for(int l = 0; l < count_R1; l++){
//                    System.out.println("M is " + m);
                    int r_col = (int) fcol1.get(m);
//                    System.out.println("Current is  " + r_col);
                    table1.get(l).remove(r_col);
                    
//                    System.out.println("Removed Successfully");
                 }
             } 
              //dislay table1 after remove columns   *DEBUG
    //          System.out.println("TABLE1 AFTER REMOVED COL");
    //          for(int i = 0; i < count_R1; i++){
    //              System.out.println(table1.get(i));
    //              System.out.println("Current row size " + table1.get(i).size());
    //          }
        }else{
            collist1.append("Redshift is matched with Oracle." + "\n");
        }
        countMH1.setText(String.valueOf(count_MH1));
     
     //redshift compared with oracle and remove redshift table size
     for(int i = 0; i < count_H2; i++){
        for (int j = 0; j < count_H1; j++){
              //*DEBUG
//              System.out.print("Table 1 Column " + i + "=" + table1.get(0).get(i)+"-------------");
//              System.out.println("Table 2 Column " + j + "=" + table2.get(0).get(j));
                if(table2.get(0).get(i).trim().equals(table1.get(0).get(j).trim().toLowerCase())){
                      fcol2.remove(Integer.valueOf(i));     
                      break;
               }// end 2nd if
         }//end second for
     }// end first for
     
     if(!fcol2.isEmpty()){//display missing column compared to Redshift
            //        System.out.println("Oracle is missing columns below: ");
            collist2.append("Oracle is MISSING columns below: " + "\n");
            for(int k = 0; k < fcol2.size(); k++){
                collist2.append("Col " + (Integer)fcol2.get(k));
                collist2.append("\n");
                collist2.append(table2.get(0).get((Integer)fcol2.get(k)));
                collist2.append("\n");
                //DEBUG
    //            System.out.print("Col " + (Integer)fcol2.get(k));
    //            System.out.println(" " + table2.get(0).get((Integer)fcol2.get(k)));
        //      System.out.println("Current H1 is " + count_H1);
                count_H2--;
                count_MH2++;
            }//end for

            //remove table2 columns
             for(int m = fcol2.size()-1 ; m >= 0; m--){
                 for(int l = 0; l < count_R2; l++){
//                    System.out.println("M is " + m);
                    int r_col = (int) fcol2.get(m);
//                    System.out.println("Current is  " + r_col);
                    table2.get(l).remove(r_col);
//                    System.out.println("Removed Successfully");
                 }//end for
             
             } //end for
              //dislay table2 after remove columns DEBUG
    //          System.out.println("TABLE2 AFTER REMOVED COL");
    //          for(int i = 0; i < count_R2; i++){
    //              System.out.println(table2.get(i));
    //               System.out.println("Current row size " + table1.get(i).size());
    //          }
            }else{
                collist2.append("Oracle is matched with Redshift." + "\n");
            }//end if
         countMH2.setText(String.valueOf(count_MH2));
     
//    display missing columns *DEBUG
//     System.out.println("Fcol 1 is " + fcol1);
//     System.out.println("Fcol 2 is " + fcol2);
//    if (fcol1.isEmpty() && fcol2.isEmpty()){
//        System.out.println("Columns Hearders are same");
//        collist1.append("Columns Hearders are same" + "\n");        
//    }
//--------------------------------------------------------------------------------------------ROW-------------------------------------------------------------------------------------------    
    
     //compare row based on primary key columns    
//     System.out.println("The number of rows of file1 and file2 are ");
//     System.out.println("Count_R1 " + count_R1 );
//     System.out.println("Count_H1 " + count_H1 );
//     System.out.println("Count_R2 " + count_R2 );
//     System.out.println("Count_H2 " + count_H2 );
      //remove first row index which store header
//     frow1.remove(Integer.valueOf(0));
//     frow2.remove(Integer.valueOf(0));

//      System.out.println("Frow 1 is " + frow1);
//    System.out.println("Frow 2 is " + frow2);
     
     
     // Oracle compared with redshift and remove redshift table size
     for(int i = 1; i < count_R1; i++){
        for (int j = 1; j < count_R2; j++){
            //DEBUG
//            System.out.println("Table 1 Rows " + i + "=" + table1.get(i).get(0)+"-------------");
//            System.out.print("Table 2 Rows " + j + "=" + table2.get(j).get(0));
            if(table1.get(i).get(0).trim().equals(table2.get(j).get(0).trim())){
                //DEBUG
//               System.out.println("Table 1 Row  " + i + " " + table1.get(i).get(0).trim());
//               System.out.println("Table 2 Row  " + j + " " + table2.get(j).get(0).trim());
//               System.out.println("Matched");
                frow1.remove(Integer.valueOf(i));
                break;
            }//end second if
        }//end second for
     }//end first for
//     System.out.println("Frow is " + frow1 + "Size : "+ frow1.size());
    if(!frow1.isEmpty()){//display missing rows compared to Oracle
          rowlist1.append("Redshift is MISSING rows below: " + "\n");
            for(int k = 0; k < frow1.size(); k++){
//               rowlist1.append("Row " + (Integer)frow1.get(k));
//               rowlist1.append("\n");
               rowlist1.append(table1.get((Integer)frow1.get(k)).get(0));
//               rowlist1.append(table1.get((Integer)frow1.get(k)).toString());
               rowlist1.append("\n");
               //DEBUG
//               System.out.print("Row " + (Integer)frow1.get(k));
//               System.out.println(" " + table1.get((Integer)frow1.get(k)));
               count_MR1++;
            } 
//           System.out.println("Frow is " + frow1);
//           System.out.println("Size is " + frow1.size());
            for(int m = frow1.size()-1; m > -1; m--){
//                 System.out.println("M is " + m);
                int r_row = (int) frow1.get(m);
                //DEBUG
//                System.out.println("Current is  " + r_row);
                table1.remove(r_row);
//                System.out.println("Removed Successfully");
                  count_R1--;
//                table1.trimToSize(); 
         } 
            
          //dislay table1 after remove columns DEBUG
//          System.out.println("TABLE1 AFTER REMOVED ROW");
//          for(int i = 0; i < count_R1; i++){
//              System.out.println(table1.get(i));
//          } 
        }else{
            rowlist1.append("Redshift is matched with Oracle" + "\n");
        }
        countMR1.setText(String.valueOf(count_MR1));  
//     System.out.println("Count_R1 " + count_R1 );
//     System.out.println("Count_R2 " + count_R2 );
     // Redshift compared with oracle and remove oracle table size
     for(int i = 1; i < count_R2; i++){
         for (int j = 1; j < count_R1; j++){
            //DEBUG
//            System.out.println("Table 2 Rows " + i + "=" + table2.get(i).get(0)+"-------------");
//            System.out.print("Table 1 Rows " + j + "=" + table1.get(j).get(0));
            if(table2.get(i).get(0).trim().equals(table1.get(j).get(0).trim())){
                //DEBUG
//                System.out.println("Current I Value is " + i);
//               System.out.println("Table 2 Row  " + i + " " + table2.get(i).get(0).trim());
//               System.out.println("Table 1 Row  " + j + " " + table1.get(j).get(0).trim());
//               System.out.println("Matched");
                frow2.remove(Integer.valueOf(i));
                break;
            }//end second if
        }//end second for
     }//end first for
//     System.out.println("Frow is " + frow2 + "Size : "+ frow2.size());
        if(!frow2.isEmpty()){//display missing rows compared to Redshift
//            System.out.println("Oracle is missing rows below: ");
            rowlist2.append("Oracle is MISSING rows below: " + "\n");
            for(int k = 0; k < frow2.size(); k++){
//               rowlist2.append("Row " + (Integer)frow2.get(k));
//               rowlist2.append("\n");
               rowlist2.append(table2.get((Integer)frow2.get(k)).get(0));
//               rowlist2.append(table2.get((Integer)frow2.get(k)).toString());
               rowlist2.append("\n");
               //DEBUG
//               System.out.print("Row " + (Integer)frow2.get(k));
//               System.out.println(" " + table2.get((Integer)frow2.get(k)));
               count_MR2++;
            } 
//           System.out.println("Frow is " + frow2);
//           System.out.println("Size is " + frow2.size());
            for(int m = frow2.size()-1; m > -1; m--){
                int r_row = (int) frow2.get(m);
                //DEBUG
//                System.out.println("Current is  " + r_row);
                table2.remove(r_row);
                count_R2--;
//                table1.trimToSize(); 
         } 
            
          //dislay table1 after remove columns
          //DEBUG
//          System.out.println("TABLE2 AFTER REMOVED ROW");
//          for(int i = 0; i < count_R2; i++){
//              System.out.println(table2.get(i));
//          } 
        }else{
            rowlist2.append("Oracle is matched with Redshift" + "\n");
        }
        countMR2.setText(String.valueOf(count_MR2));
        
     
    
     
     //display missing rows    
//     System.out.println("Frow 1 is " + frow1);
//     System.out.println("Frow 2 is " + frow2);
    
//     if (frow1.isEmpty() && frow2.isEmpty()){
//        System.out.println("Rows Headers are same");
//        rowlist1.append("Rows Hearders are same" + "\n");        
//    }
//--------------------------------------------------------------------------------------------ROW ELEMENT-------------------------------------------------------------------------------------------    
//     System.out.println("Checking attributes for each elements"); 
     
     
//     System.out.println("Count_R1 " + count_R1 );
//     System.out.println("Count_H1 " + count_H1 );
//     System.out.println("Count_R2 " + count_R2 );
//     System.out.println("Count_H2 " + count_H2 );
     /*
     //find identical PK rows and compare its elements
     for(int i = 1; i < count_R1; i++){
            for (int k = 1; k < count_R1; k++){ // find same PK row
//                 System.out.println("Rows-> " + i + "--" +table1.get(i).get(0).trim());
//                 System.out.println("Rows-> " + k + "--" +table2.get(k).get(0).trim());
                if (table1.get(i).get(0).trim().equals(table2.get(k).get(0).trim())){
                    System.out.println("Found!");
                    for(int j = 0; j < count_H1;j++){ // compare column values within PK rows
//                        System.out.println("Column : " + j + "--" +table1.get(0).get(j).trim());  
//                        System.out.println("Table_1 Rows-> " + i + "--" +table1.get(i).get(0).trim());
//                        System.out.println(table1.get(i).get(j));
       //                 System.out.println(sublist1.get(j));
//                        System.out.println("Table_2 Rows-> " + i + "--" +table2.get(i).get(0).trim());
//                        System.out.println(table2.get(i).get(j));
    //                 System.out.println(sublist2.get(j));  
                        if(table1.get(i).get(j).trim().equals(table2.get(i).get(j))){//display mismatch value 
                            System.out.println("Matched!");
                        }else{
                            misslist.append("Row -- " + i + " | " + "Col -- " + j + ": " +table1.get(0).get(j).trim() + "\n");
                            misslist.append("Table 1 ROW : " + table1.get(i).get(0).trim() + " --> "+table1.get(i).get(j) + "\n");
                            misslist.append("Table 2 ROW : " + table2.get(i).get(0).trim() + " --> "+table2.get(i).get(j) + "\n");
                            misslist.append("MisMatch" + "\n");
                            System.out.println("Wrong!");

                         }//end second iF
                    }//end third for
                   break;
                }//end first if
//                 System.out.println("Column : " + j + "--" +table1.get(0).get(j).trim());
//                 System.out.println("Table_1");  
//                 System.out.println("Rows-> " + i + "--" +table1.get(i).get(0).trim());
//                 System.out.println(table1.get(i).get(j));
//                 System.out.println(sublist1.get(j));
//                 System.out.println("Table_2");
//                 System.out.println("Rows-> " + i + "--" +table2.get(i).get(0).trim());
//                 System.out.println(table2.get(i).get(j));
//                 System.out.println(sublist2.get(j));  
                 
           }//end second for
     }//end first for
     
     */
 
     //compare by row columns
     for(int i = 1; i < count_R1; i++){
//         ArrayList<String> sublist1 = table1.get(i);
//         ArrayList<String> sublist2 = table2.get(i);
//          for (int j = 0; j < count_H2; ++j){
//           System.out.println("Table1  size " + table1.get(i).size());
//            for (int j = 0; j < table2.get(i).size(); j++){ 
            for (int j = 0; j < count_H1; j++){  
//                 System.out.println("Column : " + j + "--" +table1.get(0).get(j).trim());
//                 System.out.println("Table_1");  
//                 System.out.println("Rows-> " + i + "--" +table1.get(i).get(0).trim());
//                 System.out.println(table1.get(i).get(j));
//                 System.out.println(sublist1.get(j));
//                 System.out.println("Table_2");
//                 System.out.println("Rows-> " + i + "--" +table2.get(i).get(0).trim());
//                 System.out.println(table2.get(i).get(j));
//                 System.out.println(sublist2.get(j));  
                 if(table1.get(i).get(j).trim().equals(table2.get(i).get(j).trim())){
//                   System.out.println("Matched!");
                 }else{
                   misslist.append("Row -- " + i + " | " + "Col -- " + j + ": " +table1.get(0).get(j).trim() + "\n");
                   misslist.append("Table 1 ROW : " + table1.get(i).get(0).trim() + " --> "+table1.get(i).get(j) + "\n");
                   misslist.append("Table 2 ROW : " + table2.get(i).get(0).trim() + " --> "+table2.get(i).get(j) + "\n");
                   misslist.append("MisMatch" + "\n");
//                   System.out.println("Wrong!");
                   miss_result = true;
                   count_ME++;
                 }//end second iF
           }//end second for
      }//end first for
//      System.out.println("CountMe value is " + count_ME);
     countME.setText(String.valueOf(count_ME));
     //display missing result in gui form
     if(miss_result == false){
         misslist.append("The row elements in Redshift is matched with Oracle!" + "\n");
     }
     
     status.setText("DONE");
     status.setForeground(Color.black);

    }//GEN-LAST:event_startBtnActionPerformed

    private void pathBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathBtn2ActionPerformed
    
        // show file path
        JFileChooser file2 = new JFileChooser();
        int opt = file2.showOpenDialog(null);
        File filepath2 = file2.getSelectedFile();
        if (opt == JFileChooser.APPROVE_OPTION){
            path2.setText(filepath2.toString());
//            System.out.println("You chose to open this file: " + file2.getSelectedFile());
        }

        // This will reference one line at a time
        String line = null;

        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader =
            new FileReader(filepath2);

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader =
            new BufferedReader(fileReader);

            while((line = bufferedReader.readLine()) != null) {
               if (count_R2 == 0){
                   header2.add(line); 
                }else{
                   
                   content2.add(line);
                  frow2.add(count_R2);
                }
                count_R2++;
                /*
                System.out.println(line);
           
            //    model1.addColumn(header1.get(count_R1));
                model1.addRow(new Object[]{3});
            //    count_R1++;
               
                List1.add(line);
                Miss.add(line);
               */
               
            }// end of while
//            System.out.println("the header ->" + header1);
//            System.out.println("the content ->" + content1);
//            System.out.println("the size content ->" + content1.size());
          //  System.out.println("the current content ->" + content1.get(1).toString());
//           
            
            //cut whitespace and extra characters for headers and content
//            String[] splitHeader2 = header2.toString().trim().replace("[", "").replace("]", "").split("\\s+");
       
            splitHeader2 = header2.toString().trim().replace("[", "").replace("]", "").replaceAll("\\s+", " ").split("!"); // by quote
          //  String[] splitContent1 = content1.toString().trim().replace("[", "").replace("]", "").split("\\s+");
            
            //display splited header words
//            System.out.println("Headers: ");
   
            for (int i = 0; i < splitHeader2.length; i++){
              //  model1.addColumn(splitHeader1[i]);
              //  System.out.println(splitHeader1[i]);
                table2.add(new ArrayList<>());
                table2.get(0).add(splitHeader2[i]);
                pathResult2.append(splitHeader2[i] + " ");
                fcol2.add(count_H2);
               // System.out.println(table2[0][i]);
//               System.out.print(table2.get(0).get(i));
//               System.out.print("  ");
               count_H2++;
            }
            System.out.println("");
            pathResult2.append("\n");       
            //display splited content words
//             System.out.println("Content: ");          
        
     
             for (int i = 0; i < content2.size(); i++){
              //  model1.addColumn(splitHeader1[i]);
//             System.out.print(content1.get(i));
//             System.out.print("  ");
//               String[] splitContent2 = content2.get(i).toString().trim().replace("[", "").replace("]", "").split("\\s+");
                
                splitContent2 = content2.get(i).toString().trim().replace("[", "").replace("]", "").replaceAll("\\s+", " ").split("!");//by quote
//             System.out.println("the size splitcontent ->" + splitContent1.length);
                int c_row = i+1;
               for (int j = 0; j < splitContent2.length; j++){
//                    System.out.println(splitContent1.length);
                    table2.add(new ArrayList<>());
//                    System.out.println("C_row is " + c_row);
                    table2.get(c_row).add(splitContent2[j]);
                    pathResult2.append(splitContent2[j] + " ");
//                    System.out.print(table2.get(c_row).get(j));
//                    System.out.print("  ");
               }
//                System.out.println("Current row size " + table2.get(c_row).size());
//                System.out.println("");
                pathResult2.append("\n");
            }
//            System.out.println("RoW 103 : " + table2.get(103));
//            System.out.println("RoW 103 : " + table2.get(103).size());
//            System.out.println("RoW 104 : " + table2.get(104));
//            System.out.println("Size : " + table2.get(104).size());
            count2.setText(String.valueOf(count_R2));
            // Always close files.
            bufferedReader.close();
        }
        catch(FileNotFoundException ex) {
            System.out.println(
                "Unable to open file '" +
                filepath2 + "'");
        }
        catch(IOException ex) {
            System.out.println(
                "Error reading file '"
                + filepath2 + "'");
            // Or we could just do this:
            // ex.printStackTrace();
        }

    }//GEN-LAST:event_pathBtn2ActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        //variables reset
        header1.clear();
       // System.out.print("Header1 after clear : " + header1 + "Size " + header1.size());
        content1.clear();
       // System.out.print("Content1 after clear : " +content1 + "Size " + content1.size());
        table1.clear();
       //  System.out.print("Table1 after clear : " +table1 + "Size " + table1.size());
        header2.clear();
        content2.clear();
        table2.clear();
        count_R1 = 0;
        count_R2 = 0;
        count_H1 = 0;
        count_H2 = 0;
        count_MR1 = 0;
        count_MR2 = 0;
        count_MH1 = 0;
        count_MH2 = 0;
        count_ME = 0;
        fcol1.clear();
      //   System.out.print("Fcol after clear : " +fcol1 + "Size " + fcol1.size());
        fcol2.clear();
        frow1.clear();
        frow2.clear();
        miss_result = false;
        //interface reset
        status.setText("Ready");
        status.setForeground(Color.BLACK);
        path1.setText("");
        pathResult1.setText("");
        count1.setText("");
        path2.setText("");
        pathResult2.setText("");
        count2.setText("");
        countMR1.setText("");
        countMR2.setText("");
        countMH1.setText("");
        countMH2.setText("");
        countME.setText("");
        collist1.setText("");
        collist2.setText("");
        rowlist1.setText("");
        rowlist2.setText("");
        misslist.setText("");
    }//GEN-LAST:event_resetBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
              
            };
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea collist1;
    private javax.swing.JTextArea collist2;
    private javax.swing.JLabel count1;
    private javax.swing.JLabel count2;
    private javax.swing.JLabel countME;
    private javax.swing.JLabel countMH1;
    private javax.swing.JLabel countMH2;
    private javax.swing.JLabel countMR1;
    private javax.swing.JLabel countMR2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextArea misslist;
    private javax.swing.JTextField path1;
    private javax.swing.JTextField path2;
    private javax.swing.JButton pathBtn1;
    private javax.swing.JButton pathBtn2;
    private javax.swing.JTextArea pathResult1;
    private javax.swing.JTextArea pathResult2;
    private javax.swing.JButton resetBtn;
    private javax.swing.JTextArea rowlist1;
    private javax.swing.JTextArea rowlist2;
    private javax.swing.JButton startBtn;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
}
